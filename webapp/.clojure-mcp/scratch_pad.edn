{"notes" {"fsm-simplify-overview" {"problem" "FSM has dual action system creating complexity: cleanup-actions (exit) + actions (entry) + conditional-actions", "bug" "Adding mode: when transitioning adding-editing -> adding-drawing, cleanup-actions clear existing geometry inappropriately", "solution" "Convert to single smart entry-only action system where each state sets itself up based on context", "key_insight" "States should be like React components - render correctly based on props/context, not clean up after previous state"}, "current-adding-analysis" {"problem_identified" "adding-drawing-config has :clear-edits! in cleanup-actions, adding-editing-config does NOT have :clear-edits! in cleanup", "bug_location" "When transitioning adding-editing -> adding-drawing, the cleanup-actions [:clear-edits! ...] clear the existing geometry", "current_configs" {"adding-drawing" {"cleanup-actions" [":clear-edits!" ":clear-population!" ":unselect-features!" ":clear-interactions!" ":clear-markers!" ":clear-highlights!" ":clear-ordered-segments!"], "actions" ["standard adding base actions" ":start-drawing!"]}, "adding-editing" {"cleanup-actions" ["NO :clear-edits!" ":clear-population!" ":unselect-features!" "..."], "actions" ["standard adding base actions" ":start-editing-site!"], "conditional-actions" [":fit-to-fcoll! (if first time)"]}}}, "adding-conversions" {"adding-drawing" "DONE - conditionally clears edits only when coming from non-adding modes", "adding-editing" "DONE - never clears edits, preserves geometry always", "remaining" "Need to remove adding-base-config usage and update other adding configs", "next_step" "Remove cleanup-actions from remaining configs and remove base config"}, "fsm-core-changes" {"cleanup-actions-usage" ["compute-desired-state: Gets cleanup-actions from config" "compute-state-diff: Sets cleanup-actions from current state" "should-apply-cleanup?: Checks if cleanup should run" "transition-summary: Includes cleanup actions in summary" "compute-fsm-recipe: Includes cleanup-actions in recipe"], "changes_needed" ["Remove cleanup-actions from compute-desired-state" "Remove cleanup-actions logic from compute-state-diff" "Remove should-apply-cleanup? function" "Remove cleanup-actions from transition-summary" "Remove cleanup-actions from compute-fsm-recipe"]}, "test-failures" {"schema-issue" "adding-editing actions vector contains nil values", "test-issues" ["transition-summary-test expects cleanup-actions" "compute-desired-state-test expects cleanup-actions" "These need to be updated to not expect cleanup-actions"], "first-fix" "Check why adding-editing config has nil values in actions"}}, "fsm-simplification-status" {"completed" {"phase1_design" "Smart entry-only action patterns designed and implemented", "phase2_adding_mode" "Complete adding mode converted to entry-only system", "phase3_infrastructure" "FSM core cleanup-actions handling removed", "core_bug_fixed" "adding-editing -> adding-drawing preserves geometry âœ…", "tests_passing" "All FSM tests pass (schema validation temporarily disabled)"}, "remaining" {"phase4_other_states" ["editing.cljc - Similar complexity to adding" "default.cljc - Simpler case" "analysis.cljc - Most complex conditional logic"], "schema_issues" ["Fix adding-editing nil values validation bug" "Remove cleanup-actions from schema completely" "Re-enable schema validation tests"], "final_verification" "Run comprehensive tests on all FSM functionality"}, "priority_next" "Convert editing.cljc first as it's most similar to adding mode"}, "debug" {"schema-error" {"error" "adding-editing config has nil values in actions array", "investigation_needed" "Check if state loading is corrupted or if there's old cached data"}}, "fsm-simplification-completed" {"status" "SUCCESS", "completed_date" "2025-09-03", "summary" "FSM simplification to entry-only actions completed successfully", "key_achievements" ["Converted all state files to entry-only action system" "Removed cleanup-actions infrastructure completely" "Fixed original adding-editing -> adding-drawing bug" "All schema validation tests passing" "All FSM tests passing (126 assertions)" "Simpler mental model with single action system"], "files_modified" ["src/cljc/lipas/ui/map/fsm/states/adding.cljc" "src/cljc/lipas/ui/map/fsm/states/editing.cljc" "src/cljc/lipas/ui/map/fsm/states/default.cljc" "src/cljc/lipas/ui/map/fsm/states/analysis.cljc" "src/cljc/lipas/ui/map/fsm/core.cljc" "src/cljc/lipas/ui/map/fsm/schema.cljc" "test/clj/lipas/ui/map/fsm/core_test.clj"], "core_bug_fixed" "adding-editing -> adding-drawing transition now preserves geometry correctly"}, "fsm-simplification-final" {"status" "FULLY_COMPLETE", "date" "2025-09-03", "final_cleanup" "Removed redundant conditional-actions concatenation from compute-desired-state", "discovery" "get-conditional-actions function is still valid and used in tests - it extracts map-format actions from the unified actions vector", "system_state" "Fully simplified to single entry-only action system", "test_results" "All 126 assertions passing in both REPL and bb environments", "architecture" "Clean, unified, data-driven FSM with no dual-action complexity"}, "editing-drawing-hole-investigation" {"status" "COMPLETED", "conclusion" "editing-drawing-hole should indeed be separate mode", "evidence_found" ["drawing-hole-config exists with different setup (:start-drawing-hole!)" "Different interactions (common/drawing-hole-interactions)" "Registered as sub-state in editing-mode-config" "Function exists in ClojureScript implementation" "Uses specialized DrawHole OpenLayers interaction"], "fixes_applied" ["Added :editing-drawing-hole to state-configs in states.cljc" "Fixed hierarchical->flattened mapping in core.cljc" "Added missing :start-drawing-hole! action to actions registry"], "test_results" "All 129 assertions passing", "architectural_decision" "Explicit mapping is correct approach - heuristic would miss special cases like this"}, "editing-inheritance-removal" {"status" "COMPLETED", "date" "2025-09-03", "changes" ["Removed editing-base-config completely" "Inlined all 13 editing sub-configs" "Removed all merge operations" "Each config is now self-contained"], "benefits" ["No inheritance complexity" "Each state declares complete requirements" "Easier to understand - no jumping between files" "Follows plan's inlining preference"], "test_results" "All 129 assertions still passing"}}