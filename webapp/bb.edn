{:tasks {:requires ([clojure.string :as str])

         ;; === DEPLOYMENT CONFIGURATION ===
         :init (def deploy-config
                 {:paths {:backend-jar "target/backend.jar"
                          :frontend-js "resources/public/js/compiled/app.js"
                          :remote-backend "/var/lipas/webapp/backend.jar"
                          :remote-frontend "/var/lipas/webapp/resources/public/js/compiled/app.js"}
                  :hosts {:dev "lipas-dev"
                          :prod "lipas-prod"}
                  :urls {:dev "https://lipas-dev.cc.jyu.fi"
                         :prod "https://lipas.fi"}
                  :health-endpoints {:dev "/api/health"
                                     :prod "/api/health"}
                  :curl-opts {:dev "curl -f -k --connect-timeout 10" ; -k for self-signed certs
                              :prod "curl -f --connect-timeout 10"}})

         user-repl {:doc "Start user configured nREPL process"
                    :task (if-let [cmd (:repl-command (read-string (slurp ".user.edn")))]
                            (shell "bash -c" (apply str "source ../.env.sh && " cmd))
                            (do (println "Missing :repl-command in .user.edn")
                                (System/exit 1)))}
         cljs-watch {:task (shell "npm run watch")}
         lint {:doc "Run clj-kondo"
               :task (shell "clj-kondo --lint src")}
         init-lint {:doc "Initialize Clj-kondo cache with library code"
                    :task (shell "sh -c" "clj-kondo --copy-configs --lint $(clojure -A:dev -Spath)")}
         clean-ns {:doc ""
                   :task (do
                           (let [files *command-line-args*]
                             (shell (str "clojure-lsp clean-ns --filenames=" (str/join ":" files)))))}
         cljfmt {:doc "Run cljfmt through Clojure-LSP, taking each file to format as argument (so works with shell globs)"
                 :task (do
                         (let [files *command-line-args*]
                           (shell (str "clojure-lsp format --filenames=" (str/join ":" files)))))}

         dev-deploy-cljs {:doc "Quickly compile Cljs release file and deploy to the dev server"
                          :task (do (shell "clojure -M -m shadow.cljs.devtools.cli release app")
                                    (shell (str "scp " (get-in deploy-config [:paths :frontend-js]) " lipas-dev.cc.jyu.fi:/var/tmp/app.js"))
                                    (shell (str "ssh lipas-dev.cc.jyu.fi \"sudo cp /var/tmp/app.js " (get-in deploy-config [:paths :remote-frontend]) "\"")))}

         ;; === NEW DEPLOYMENT TASKS ===

         ;; Core deployment function
         -do-deploy {:doc "Internal deployment worker - do not call directly"
                     :task (let [[env deploy-type] *command-line-args*
                                 _ (when (or (not env) (not deploy-type))
                                     (do (println "‚ùå Usage: bb -do-deploy <env> <type>")
                                         (System/exit 1)))
                                 env-key (keyword env)
                                 host (get-in deploy-config [:hosts env-key])
                                 _ (when-not host
                                     (do (println (str "‚ùå Unknown environment: " env))
                                         (System/exit 1)))
                                 deploy-both? (= deploy-type "both")
                                 deploy-backend? (or deploy-both? (= deploy-type "backend"))
                                 deploy-frontend? (or deploy-both? (= deploy-type "frontend"))
                                 type-str (case deploy-type
                                            "both" "backend + frontend"
                                            "backend" "backend only"
                                            "frontend" "frontend only")]

                             (println (str "üöÄ Starting " type-str " deployment to " env " environment..."))

                             ;; Build backend if needed
                             (when deploy-backend?
                               (println "üèóÔ∏è  Building backend uberjar...")
                               (shell "bb uberjar")
                               (when-not (.exists (java.io.File. (get-in deploy-config [:paths :backend-jar])))
                                 (println (str "‚ùå Backend jar not found at " (get-in deploy-config [:paths :backend-jar])))
                                 (System/exit 1)))

                             ;; Build frontend if needed
                             (when deploy-frontend?
                               (println "üèóÔ∏è  Building frontend app.js...")
                               (shell "npm run build")
                               (when-not (.exists (java.io.File. (get-in deploy-config [:paths :frontend-js])))
                                 (println (str "‚ùå Frontend app.js not found at " (get-in deploy-config [:paths :frontend-js])))
                                 (System/exit 1)))

                             ;; Upload files
                             (println (str "üì¶ Uploading " type-str " to " host "..."))
                             (when deploy-backend?
                               (shell (str "scp " (get-in deploy-config [:paths :backend-jar]) " " host ":/tmp/")))
                             (when deploy-frontend?
                               (shell (str "scp " (get-in deploy-config [:paths :frontend-js]) " " host ":/tmp/")))

                             ;; Deploy files and restart if needed
                             (println (str "üîÑ Deploying " type-str " on " host "..."))
                             (let [backend-commands (when deploy-backend?
                                                      (str "sudo cp /tmp/backend.jar " (get-in deploy-config [:paths :remote-backend])))
                                   frontend-commands (when deploy-frontend?
                                                       (str "sudo cp /tmp/app.js " (get-in deploy-config [:paths :remote-frontend])))
                                   restart-commands (when deploy-backend?
                                                      "sudo bash -c 'cd /var/lipas && source .env.sh && docker compose rm -sf backend && docker compose up -d backend'")
                                   all-commands (str/join " && " (filter some? [backend-commands frontend-commands restart-commands]))]

                               (shell (str "ssh " host " 'set -e && " all-commands "'")))

                             ;; Health check only if backend was deployed
                             (when deploy-backend?
                               (println "üè• Checking service health...")
                               (Thread/sleep 3000) ; Give service time to start

                               (try
                                 (let [base-url (get-in deploy-config [:urls env-key])
                                       health-endpoint (get-in deploy-config [:health-endpoints env-key])
                                       health-url (str base-url health-endpoint)
                                       curl-opts (get-in deploy-config [:curl-opts env-key])]
                                   (shell (str curl-opts " " health-url " > /dev/null 2>&1"))
                                   (println "‚úÖ Service is healthy and responding"))
                                 (catch Exception _
                                   (println "‚ö†Ô∏è  Health check failed or timed out - please verify manually"))))

                             (println (str "‚úÖ " (str/capitalize type-str) " deployment to " env " completed successfully!"))
                             (println (str "üåê " (get-in deploy-config [:urls env-key]))))}

         ;; Base deployment tasks (require environment argument)
         deploy {:doc "Deploy both backend and frontend to specified environment (dev|prod)"
                 :task (shell "bb" "-do-deploy" (first *command-line-args*) "both")}

         deploy-backend {:doc "Deploy only backend to specified environment (dev|prod)"
                         :task (shell "bb" "-do-deploy" (first *command-line-args*) "backend")}

         deploy-frontend {:doc "Deploy only frontend to specified environment (dev|prod)"
                          :task (shell "bb" "-do-deploy" (first *command-line-args*) "frontend")}

         ;; Convenience tasks (no arguments needed)
         deploy-dev {:doc "Deploy both backend and frontend to lipas-dev"
                     :task (shell "bb" "-do-deploy" "dev" "both")}

         deploy-prod {:doc "Deploy both backend and frontend to lipas-prod"
                      :task (shell "bb" "-do-deploy" "prod" "both")}

         deploy-backend-dev {:doc "Deploy only backend to lipas-dev"
                             :task (shell "bb" "-do-deploy" "dev" "backend")}

         deploy-backend-prod {:doc "Deploy only backend to lipas-prod"
                              :task (shell "bb" "-do-deploy" "prod" "backend")}

         deploy-frontend-dev {:doc "Deploy only frontend to lipas-dev"
                              :task (shell "bb" "-do-deploy" "dev" "frontend")}

         deploy-frontend-prod {:doc "Deploy only frontend to lipas-prod"
                               :task (shell "bb" "-do-deploy" "prod" "frontend")}

         ;; Database Migration Tasks
         db-migrate {:doc "Run all pending database migrations"
                     :task (shell "clojure -M:migrate migrate")}

         db-status {:doc "Show database migration status"
                    :task (shell "clojure -M:migrate status")}

         db-rollback {:doc "Rollback the last database migration"
                      :task (shell "clojure -M:migrate rollback")}

         db-reset {:doc "Reset database - rollback all migrations then migrate up"
                   :task (do (println "‚ö†Ô∏è  WARNING: This will reset the entire database!")
                             (print "Are you sure? (y/N): ")
                             (flush)
                             (let [response (read-line)]
                               (if (= (str/lower-case response) "y")
                                 (shell "clojure -M:migrate reset")
                                 (println "Database reset cancelled."))))}

         db-create {:doc "Create a new migration file with given name"
                    :task (let [migration-name (first *command-line-args*)]
                            (if migration-name
                              (shell "clojure -M:migrate create" migration-name)
                              (do (println "Usage: bb db-create <migration-name>")
                                  (println "Example: bb db-create add-user-table"))))}

         db-up {:doc "Migrate up to a specific migration ID"
                :task (let [migration-id (first *command-line-args*)]
                        (if migration-id
                          (shell "clojure -M:migrate up" migration-id)
                          (do (println "Usage: bb db-up <migration-id>")
                              (println "Example: bb db-up 20240101123456"))))}

         db-down {:doc "Migrate down a specific migration ID"
                  :task (let [migration-id (first *command-line-args*)]
                          (if migration-id
                            (shell "clojure -M:migrate down" migration-id)
                            (do (println "Usage: bb db-down <migration-id>")
                                (println "Example: bb db-down 20240101123456"))))}

         db-help {:doc "Show database migration help"
                  :task (do (println "Database Migration Tasks:")
                            (println "  bb db-status     - Show migration status")
                            (println "  bb db-migrate    - Run pending migrations")
                            (println "  bb db-rollback   - Rollback last migration")
                            (println "  bb db-reset      - Reset entire database")
                            (println "  bb db-create <n> - Create new migration")
                            (println "  bb db-up <id>    - Migrate up to specific ID")
                            (println "  bb db-down <id>  - Migrate down specific ID")
                            (println "  bb db-help       - Show this help")
                            (println "")
                            (println "Examples:")
                            (println "  bb db-status")
                            (println "  bb db-migrate")
                            (println "  bb db-create add-user-email-index")
                            (println "  bb db-up 20240101123456"))}

         ;; Build Tasks
         uberjar {:doc "Build uberjar using tools.build"
                  :override-builtin true
                  :task (shell "clojure -T:build uber")}

         build-clean {:doc "Clean build artifacts"
                      :task (shell "clojure -T:build clean")}

         jar {:doc "Build library jar"
              :task (shell "clojure -T:build jar")}

         verify-uberjar {:doc "Verify uberjar was built correctly"
                         :task (do (let [jar-file (get-in deploy-config [:paths :backend-jar])]
                                     (if (.exists (java.io.File. jar-file))
                                       (do (println "‚úÖ Uberjar exists:" jar-file)
                                           (let [size (-> (java.io.File. jar-file) .length (/ 1024 1024) int)]
                                             (println (str "üìä Size: " size "MB")))
                                           (println "üìã Testing manifest...")
                                           (shell "jar" "-tf" jar-file "| grep -q META-INF/MANIFEST.MF")
                                           (println "‚úÖ Manifest found")
                                           (println "üîç Testing main class...")
                                           (shell "jar" "-tf" jar-file "| grep -q lipas/aot.class")
                                           (println "‚úÖ Main class compiled and present")
                                           (println "üéØ Uberjar verification complete!"))
                                       (println "‚ùå Uberjar not found. Run 'bb uberjar' first."))))}

         ;; Docker Compose Tasks
         docker-build {:doc "Build backend uberjar in Docker"
                       :task (shell "docker-compose -f ../docker-compose.yml run --rm backend-build")}

         docker-migrate {:doc "Run database migrations in Docker"
                         :task (shell "docker-compose -f ../docker-compose.yml run --rm backend-migrate")}

         docker-test {:doc "Run tests in Docker"
                      :task (shell "docker-compose -f ../docker-compose.yml run --rm backend-tests")}

         docker-seed {:doc "Seed database in Docker"
                      :task (shell "docker-compose -f ../docker-compose.yml run --rm backend-seed")}

         docker-dev {:doc "Start backend in development mode"
                     :task (shell "docker-compose -f ../docker-compose.yml up backend-dev")}

         ;; Test Tasks
         test {:doc "Run fast tests (excludes integration tests)"
               :task (shell "clojure -M:dev:test")}

         test-integration {:doc "Run integration tests only"
                           :task (shell "clojure -M:dev:test-integration")}

         test-all {:doc "Run all tests (fast tests + integration tests)"
                   :task (do (println "Running fast tests...")
                             (shell "clojure -M:dev:test")
                             (println "\nRunning integration tests...")
                             (shell "clojure -M:dev:test-integration")
                             (println "\n‚úÖ All tests completed!"))}

         test-specific {:doc "Run a specific test namespace"
                        :task (let [test-ns (first *command-line-args*)]
                                (if test-ns
                                  (shell "clojure" "-M:dev:test" "--namespace" test-ns)
                                  (do (println "Usage: bb test-specific <test-namespace>")
                                      (println "Example: bb test-specific lipas.gis-test"))))}

         test-watch {:doc "Run fast tests in watch mode (requires manual restart)"
                     :task (do (println "Note: cognitect test-runner doesn't support watch mode.")
                               (println "Consider using: clojure -M:dev:test --namespace <specific-test>")
                               (println "Or use: bb test (runs all fast tests once)"))}

         test-help {:doc "Show testing help and options"
                    :task (do (println "Testing Tasks:")
                              (println "==============")
                              (println "")
                              (println "üöÄ AVAILABLE TASKS:")
                              (println "  bb test              - Run fast tests only")
                              (println "  bb test-integration  - Run integration tests only")
                              (println "  bb test-all          - Run all tests (fast + integration)")
                              (println "  bb test-specific <n> - Run a specific test namespace")
                              (println "  bb test-watch        - Info about watch mode")
                              (println "  bb test-help         - Show this help")
                              (println "")
                              (println "üîß DIRECT COMMANDS:")
                              (println "  clojure -M:dev:test                - Fast tests")
                              (println "  clojure -M:dev:test-integration     - Integration tests")
                              (println "")
                              (println "üìã TEST CONFIGURATION:")
                              (println "  Fast tests: Excludes tests marked with ^:integration")
                              (println "  Integration tests: Only tests marked with ^:integration")
                              (println "  Test path: test/clj")
                              (println "  Dev dependencies: Included via alias composition (:dev:test)")
                              (println "")
                              (println "üí° TIPS:")
                              (println "  ‚Ä¢ Use 'bb test' for quick feedback during development")
                              (println "  ‚Ä¢ Use 'bb test-integration' before commits/deployments")
                              (println "  ‚Ä¢ Use 'bb test-all' for comprehensive testing")
                              (println "  ‚Ä¢ Mark slow tests with ^:integration metadata")
                              (println "  ‚Ä¢ Alias composition (:dev:test) avoids dependency duplication"))}}}
