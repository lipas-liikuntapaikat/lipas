{:tasks {:requires ([clojure.string :as str])

         user-repl {:doc "Start user configured nREPL process"
                    :task (if-let [cmd (:repl-command (read-string (slurp ".user.edn")))]
                            (shell "bash -c" (apply str "source ../.env.sh && " cmd))
                            (do (println "Missing :repl-command in .user.edn")
                                (System/exit 1)))}
         cljs-watch {:task (shell "npm run watch")}
         lint {:doc "Run clj-kondo"
               :task (shell "clj-kondo --lint src")}
         init-lint {:doc "Initialize Clj-kondo cache with library code"
                    :task (shell "sh -c" "clj-kondo --copy-configs --lint $(lein classpath)")}
         clean-ns {:doc ""
                   :task (do
                           (let [files *command-line-args*]
                             (shell (str "clojure-lsp clean-ns --filenames=" (str/join ":" files)))))}
         cljfmt {:doc "Run cljfmt through Clojure-LSP, taking each file to format as argument (so works with shell globs)"
                 :task (do
                         (let [files *command-line-args*]
                           (shell (str "clojure-lsp format --filenames=" (str/join ":" files)))))}

         dev-deploy-cljs {:doc "Quickly compile Cljs release file and deploy to the dev server"
                          :task (do (shell "lein run -m shadow.cljs.devtools.cli release app")
                                    (shell "scp resources/public/js/compiled/app.js lipas-dev.cc.jyu.fi:/var/tmp/app.js")
                                    (shell "ssh lipas-dev.cc.jyu.fi \"sudo cp /var/tmp/app.js /var/lipas/webapp/resources/public/js/compiled/app.js\""))}}}
